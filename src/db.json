{
  "data": [
    {
      "id": "boostedJS",
      "title": "JS",
      "themes": {
        "common": [
          {
            "title": "for Loop",
            "description": "Creates a loop with three optional expressions (initialization, condition, increment)",
            "code": "for (let i = 0; i < 5; i++) {\n  console.log(i); // 0, 1, 2, 3, 4\n}",
            "tips": [
              "Ideal when the number of iterations is known",
              "The loop variable can be declared in the initialization"
            ],
            "warnings": [
              "Semicolons between expressions are required",
              "Using var instead of let makes the variable accessible outside the loop"
            ]
          },
          {
            "title": "while Loop",
            "description": "Executes a block of code as long as the specified condition is true",
            "code": "let i = 0;\nwhile (i < 5) {\n  console.log(i); // 0, 1, 2, 3, 4\n  i++;\n}",
            "tips": [
              "Use when the number of iterations is unknown",
              "Ensure the condition eventually becomes false to avoid infinite loops"
            ],
            "warnings": [
              "Forgetting to increment the counter will cause an infinite loop"
            ]
          },
          {
            "title": "if Condition",
            "description": "Executes a block if a specified condition is true",
            "code": "const age = 18;\nif (age >= 18) {\n  console.log(\"Adult\");\n} else {\n  console.log(\"Minor\");\n}",
            "tips": [
              "Use else if for multiple conditions",
              "Conditions can be complex boolean expressions"
            ],
            "warnings": [
              "Using assignment (=) instead of comparison (== or ===) is a common mistake"
            ]
          },
          {
            "title": "switch Statement",
            "description": "Evaluates an expression and executes code blocks based on matching cases",
            "code": "const day = \"Monday\";\nswitch (day) {\n  case \"Monday\":\n    console.log(\"Work day\");\n    break;\n  case \"Saturday\":\n    console.log(\"Weekend\");\n    break;\n  default:\n    console.log(\"Unknown day\");\n}",
            "tips": [
              "More readable than multiple if-else statements for exact value matching",
              "The default case is optional"
            ],
            "warnings": [
              "Missing break statements will cause fall-through to the next case",
              "Case comparisons are strict (===)"
            ]
          },
          {
            "title": "Logical Operators",
            "description": "Used to combine or invert boolean values",
            "code": "// AND (&&)\ntrue && false  // false\n// OR (||)\ntrue || false  // true\n// NOT (!)\n!true          // false",
            "tips": [
              "Can be used for short-circuit evaluation",
              "Use parentheses to clarify complex expressions"
            ],
            "warnings": [
              "Non-boolean values will be coerced to boolean in evaluations",
              "Operator precedence can lead to unexpected results"
            ]
          },
          {
            "title": "Ternary Operator",
            "description": "Shorthand conditional operator that returns one of two values",
            "code": "const age = 20;\nconst status = age >= 18 ? \"Adult\" : \"Minor\";",
            "tips": [
              "Great for simple conditional assignments",
              "More concise than if-else for single expressions"
            ],
            "warnings": [
              "Avoid nesting ternary operators as it reduces readability",
              "Not a complete replacement for if-else statements"
            ]
          },
          {
            "title": "Hoisting",
            "description": "JavaScript's behavior of moving declarations to the top of their scope",
            "code": "console.log(x); // undefined\nvar x = 5;\n\nconsole.log(y); // ReferenceError\nlet y = 10;",
            "tips": [
              "Use let/const to avoid hoisting surprises",
              "Function declarations are fully hoisted"
            ],
            "warnings": [
              "var variables are hoisted but initialized as undefined",
              "let/const are hoisted but not initialized (Temporal Dead Zone)"
            ]
          },
          {
            "title": "for...of Loop",
            "description": "Creates a loop iterating over iterable objects (arrays, strings)",
            "code": "const arr = [10, 20, 30];\nfor (const num of arr) {\n  console.log(num); // 10, 20, 30\n}",
            "tips": [
              "Simplifies array iteration compared to traditional for loops",
              "Works with any iterable (Maps, Sets, etc.)"
            ],
            "warnings": [
              "Cannot directly access the index (use entries() if needed)",
              "Doesn't work with plain objects"
            ]
          },
          {
            "title": "for...in Loop",
            "description": "Iterates over the enumerable properties of an object",
            "code": "const obj = { a: 1, b: 2 };\nfor (const key in obj) {\n  console.log(key); // \"a\", \"b\"\n}",
            "tips": [
              "Use hasOwnProperty() to filter out prototype properties",
              "Can be used with Object.keys() for safer iteration"
            ],
            "warnings": [
              "Iterates over all enumerable properties including inherited ones",
              "Array indices will be strings (\"0\", \"1\", etc.)"
            ]
          }
        ]
      }
    },
    {
      "id": "javascript",
      "title": "javascript",
      "themes": {
        "common": [
          "loops",
          "if else",
          "switch",
          "logical operators",
          "conditional operators",
          "hosting",
          "for .. of",
          "for .. in"
        ],
        "objects": {
          "common": [
            "Set / Get / delete object properties/ methods",
            "Set / Get object keys",
            "For .. In cycle",
            "Ways to create object",
            "reference types"
          ],
          "garbageCollector": [
            "What is a garbage Collector?",
            "Why do we need it?"
          ]
        },
        "dataTypes": {
          "common": ["List of types", "data types(null undefined), difference"],
          "DateTime": ["methods"],
          "JSON": ["Clone objects with JSON methods"]
        },
        "functions": {
          "common": [
            "Immidiately-invoked function expressions",
            "Types of functions"
          ],
          "ExecutionContext": [
            "methods",
            "'this' definition",
            "ways to bind this to the function",
            "Global context(window)",
            "context loosing"
          ]
        },
        "prototypes": [
          "loops",
          "'__proto__' and protorype properties",
          "chain of prototypes",
          "create object with prototype",
          "get and set object prototype"
        ],
        "asyncProgramming": {
          "eventLoop": ["principle of working?", "order of tasks, sync code"],
          "scheduling": [
            "setTimeout, setInterval",
            "Why do we need them?",
            "Clear timeouts and intervals"
          ],
          "promise": [
            "Promises",
            "States of Promises",
            "Exceptions/error handling",
            "catch"
          ],
          "asyncAwait": [
            "Examples of async functions",
            "Exceptions/error handling"
          ]
        },
        "network": ["REST", "CORS", "Websockets", "HTTP methods"],
        "regExp": ["Syntax", "Methods"],
        "classes": [
          "Basic syntax",
          "Inheritance",
          "Private and protected properties and methods"
        ]
      }
    },
    {
      "id": "react",
      "title": "react",
      "themes": {
        "JSX": {
          "render": ["Why and how do we use ReactDOM library"],
          "jsxLessReact": [
            "Why do we import react if we don't use it",
            "Note: question is about old react version (before 17th version)"
          ]
        },
        "reconciliation": {
          "fiber": [
            "What is 'Fiber' in react library",
            "Explain how this algorithm works in own words"
          ],
          "jobs": ["A basic understanding of how prioritization works in react"]
        },
        "components": {
          "themes": {
            "functionalComponents": [
              "Know and understand at a basic level what functional components are for",
              "How to work with state in functional components"
            ],
            "classComponents": [
              "Ability to write a class component",
              "Working with state",
              "working with querries"
            ],
            "props": [
              "Understanding what props are for",
              "Why are they readonly",
              "how to organize reverse data flow to parent"
            ],
            "state": [
              "Working with state in class and functional components",
              "Basic understanding of how setState works"
            ],
            "lifecycleMethods": [
              "some lifecycle methods, maybe from class components?"
            ],
            "propsValidation": [
              " How runtime typing works in react",
              "default props",
              "prop types"
            ],
            "pureComponent/memo": ["pureComponent/memo"],
            "refs": ["Why do we need ref", "What is ref in react"],
            "context": ["context"],
            "portals": [
              "Understanding and being able to explain in your own words what portals are used for in react"
            ],
            "patterns": ["Conditional render"]
          }
        },
        "events": {
          "jsxHandlers": [
            "Understanding and being able to explain the difference between native handlers and handlers in react"
          ],
          "binding": [
            "Understanding and the ability to explain how to not to lose context, etc."
          ],
          "syntheticEvent": ["What is SynteticEvent and what is it for"],
          "eventTypes": [
            "What are the types of events in react",
            "What it is",
            "Note: very briefly"
          ],
          "controlledComponents": [
            "What is the difference between controlled and uncontrolled components",
            "Understanding pros and cons",
            "Ability to explain the essence in your own words"
          ],
          "forms": ["custom form implmentation"],
          "bubblingReact": [
            "Understanding how component bubbling works",
            "explanation in your own words"
          ]
        },
        "optimization": {
          "virtualization": ["what is virtualization"],
          "useMemo": ["useMemo", "useCallBack"],
          "devtools": ["react devtools", "redux devtools"]
        },
        "testing": {
          "testingTools": [
            "What are jest and enzyme for",
            "basic understanding of writing tests"
          ],
          "RTL": ["What is RTL", "basic understanding of writing tests"],
          "testingTypes": [
            "basic understanding of snapshot testing, why it can be used",
            "component testing"
          ]
        },
        "routing": {
          "reactRouter": ["Knows how to work with react-router"],
          "hooksRouting": ["hooks routing"],
          "reactRouterApi": [
            "basic understanding of API components: Route, Switch, Link"
          ],
          "browserApi": ["history, location, match"],
          "connected": ["Connected react router"]
        },
        "serverInteraction": {
          "workingWithAPI": ["working with API"]
        },
        "redux": {
          "reduxMainPrinciples": [
            "Understand and be able to explain in detail what Redux is for",
            "Describe how it works",
            "What entities are used in it"
          ],
          "HOCconnect": [
            "Understanding what connect is for",
            "What role does it play in the application architecture",
            "Know and be able to tell about this HOC"
          ],
          "action": ["Confident understanding of actions as an entity"],
          "reducers": [
            "Basic understanding of the work of a reducer: what basic rules it must comply with",
            "Confident writing if the reducer"
          ],
          "middlewares": ["Understanding the concept of middleware"],
          "selectors": ["selectors"],
          "reduxForm": ["How redux-forms works in react+redux ecosystem"]
        },
        "hooks": {
          "whyHooks": [
            "Wha the hooks in react",
            "the ability to explain the benefits of hooks in your own words"
          ],
          "useEffect": [
            "Understanding what lifecycle methods this hook can replace",
            "What is the second argument for",
            "How to unsubscribe from changes"
          ],
          "stateHooks": [
            "Ability to work with basic hooks",
            "Explain in your own words how useState and useReducer work",
            "What paremeters are accepted",
            "useState, useReducer, useContext"
          ],
          "customHooks": ["basic knowledge"],
          "otherHooks": ["understanding what useRef is for"]
        }
      }
    }
  ]
}
